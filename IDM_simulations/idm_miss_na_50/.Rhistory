inter_est1 <- inter_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_inter_na1.RData")
inter_est2 <- inter_estimates_na
#########################
#       N.species = 50
################################
#Loading data for N.species =20
load("/Volumes/kwakupa/idm_miss_na_50/estimate_inter_na.RData")
inter_est1 <- inter_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_inter_na1.RData")
inter_est2 <- inter_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_inter_na2.RData")
inter_est3 <- inter_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_inter_na3.RData")
inter_est4 <- inter_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_inter_na4.RData")
inter_est5 <- inter_estimates_na
inter_estimates_na <- c(inter_est1,
inter_est2,
inter_est3,
inter_est4,
inter_est5)
inter_estimates_na
setwd("/Volumes/kwakupa/idm_miss_na_50")
load("sim_interractions_na.RData")
simulations_all <- simulations_all_na[[1]]
require(coda)
require(nimble)
require(devtools)
require(mcmcplots)
require(MCMCglmm)
require(furrr)
require(purrr)
require(future.apply)
library(parallel)
library(foreach)
library(progressr)
library(pbapply)
library(ggmcmc)
handlers(global = TRUE)
op <- pboptions(type="timer")
#### Load required packages ####
require(coda)
require(nimble)
require(devtools)
require(mcmcplots)
require(MCMCglmm)
require(furrr)
require(ggmcmc)
require(purrr)
require(future.apply)
library(parallel)
library(foreach)
############################################
start_time <- Sys.time()
code <- nimbleCode({
#############################################################
#                 PRIOR DISTRIBUTIONS                       #
#############################################################
for(spe.tag in 1:n.species){
beta0[spe.tag]~ dnorm(0, sd=1)
#mean.lambda[spe.tag] <- exp(beta0[spe.tag])
#beta0[spe.tag] <- log(mean.lambda[spe.tag])
#mean.lambda[spe.tag] ~ dunif(0,50)
alpha0[spe.tag] ~  dnorm(0,sd=100)
#mean.p[spe.tag] ~ dunif(0,1)
beta1[spe.tag] ~ dnorm(0,sd=1)
alpha1[spe.tag] ~ dnorm(0,sd=100)
}
for(spe.tag in 1:n.species){
mu.eta[spe.tag] <- 0
}
for(site.tag in 1:n.sites){
eta.lam[site.tag, 1:n.species] ~ dmnorm(mean = mu.eta[1:n.species],prec= omega[1:n.species, 1:n.species])
}
#Vague prior for variance covariance matrix
omega[1:n.species,1:n.species] ~ dwish(R[1:n.species,1:n.species], df)
Cov[1:n.species,1:n.species] <- inverse(omega[1:n.species,1:n.species])
for (spe.tag in 1:n.species) {
for (ss in 1:n.species) {
# Cov[spe.tag, ss] <- inprod(lamLatent[1:NLatent, spe.tag], lamLatent[1:NLatent, ss])+ Sigma[spe.tag,ss]
CorrIn[spe.tag, ss] <- Cov[spe.tag, ss]/sqrt(Cov[spe.tag, spe.tag] * Cov[ss, ss])
}
}
precmatrix[1:n.species, 1:n.species] <- inverse(Cov[1:n.species, 1:n.species])
#Link between the abundance and occupancy
for(site.tag in 1:n.sites){
for(spe.tag in 1:n.species){
mu[site.tag,spe.tag] <- beta0[spe.tag] + beta1[spe.tag]*ecological_cov[site.tag]+eta.lam[site.tag,spe.tag]
#log(lambda[site.tag, spe.tag]) <-  mu[site.tag,spe.tag]
cloglog(psi[site.tag, spe.tag]) <-mu[site.tag,spe.tag]
psi1[site.tag, spe.tag] <- psi[site.tag, spe.tag]-0.000001
#log(lambda[site.tag, spe.tag]) <-  cloglog(psi[site.tag, spe.tag])
lambda[site.tag, spe.tag] <- -log( 1-psi1[site.tag, spe.tag])
#cloglog(psi[site.tag, spe.tag]) <- log(lambda[site.tag, spe.tag])
#psi[site.tag, spe.tag] <- 1-exp(- lambda[site.tag, spe.tag])
}
}
#Detection probability
for(site.tag in 1:n.sites){
for(spe.tag in 1:n.species){
logit(p.tag[site.tag, spe.tag]) <- alpha0[spe.tag] + alpha1[spe.tag]*detection_cov[site.tag]
}
}
#p.tag ~ dunif(0.001,1)
# Likelihood: key definitions in the likelihood
#############################################################
#                 Abundance Model                           #
#############################################################
for(site.tag in 1:n.sites){
lambda.g[site.tag] <- sum(lambda[site.tag,1:n.species])
for(k in 1:n.visit){
Y[site.tag,k] ~ dpois(lambda.g[site.tag])
}
}
#############################################################
#                 Occurence Model                           #
#############################################################
for(site.tag in 1:n.sites){
for(spe.tag in 1:n.species){
z[site.tag,spe.tag] ~ dbern(psi[site.tag, spe.tag])
for(k in 1:n.visit){
X[site.tag,spe.tag,k] ~ dbin(z[site.tag,spe.tag]*p.tag[site.tag, spe.tag], n.replicates)
}
}
}
#############################################################
#                pis                           #
#############################################################
for(site.tag in 1:n.sites){
for(spe.tag in 1:n.species){
pis[site.tag, spe.tag] <- (lambda[site.tag,spe.tag]/lambda.g[site.tag])
}
}
# sumLogProb ~ dnorm(0,1)
})
data <- simulations_all
#dimensions of the data
dim_data <- dim(data[[1]])
setwd("/Volumes/kwakupa/idm_miss_na_50")
#Parameters needed for this function
load("/Volumes/kwakupa/idm_functions/parameters_50.RData")
source("/Volumes/kwakupa/idm_functions/function_for_simulation.R")
#List of input parameters
input_list_na <- list(input50)
input_list_na
#Number of replicates
nreplicates <- 100
simulations_all <- pblapply(input_list_na, function(x){
pblapply(1:nreplicates, function(z){
data <- sim(x, seed = z)
}, cl=4)
}, cl=4)
simulations_all_na <- flatten(simulations_all)
#save the results
save(simulations_all_na, file="sim_interractions_na.RData")
save(input_list_na, file="sim_input_na.RData")
simulations_all <- simulations_all_na[[1]]
handlers(global = TRUE)
op <- pboptions(type="timer")
#### Load required packages ####
require(coda)
require(nimble)
require(devtools)
require(mcmcplots)
require(MCMCglmm)
require(furrr)
require(ggmcmc)
require(purrr)
require(future.apply)
library(parallel)
library(foreach)
############################################
start_time <- Sys.time()
code <- nimbleCode({
#############################################################
#                 PRIOR DISTRIBUTIONS                       #
#############################################################
for(spe.tag in 1:n.species){
beta0[spe.tag]~ dnorm(0, sd=1)
#mean.lambda[spe.tag] <- exp(beta0[spe.tag])
#beta0[spe.tag] <- log(mean.lambda[spe.tag])
#mean.lambda[spe.tag] ~ dunif(0,50)
alpha0[spe.tag] ~  dnorm(0,sd=100)
#mean.p[spe.tag] ~ dunif(0,1)
beta1[spe.tag] ~ dnorm(0,sd=1)
alpha1[spe.tag] ~ dnorm(0,sd=100)
}
for(spe.tag in 1:n.species){
mu.eta[spe.tag] <- 0
}
for(site.tag in 1:n.sites){
eta.lam[site.tag, 1:n.species] ~ dmnorm(mean = mu.eta[1:n.species],prec= omega[1:n.species, 1:n.species])
}
#Vague prior for variance covariance matrix
omega[1:n.species,1:n.species] ~ dwish(R[1:n.species,1:n.species], df)
Cov[1:n.species,1:n.species] <- inverse(omega[1:n.species,1:n.species])
for (spe.tag in 1:n.species) {
for (ss in 1:n.species) {
# Cov[spe.tag, ss] <- inprod(lamLatent[1:NLatent, spe.tag], lamLatent[1:NLatent, ss])+ Sigma[spe.tag,ss]
CorrIn[spe.tag, ss] <- Cov[spe.tag, ss]/sqrt(Cov[spe.tag, spe.tag] * Cov[ss, ss])
}
}
precmatrix[1:n.species, 1:n.species] <- inverse(Cov[1:n.species, 1:n.species])
#Link between the abundance and occupancy
for(site.tag in 1:n.sites){
for(spe.tag in 1:n.species){
mu[site.tag,spe.tag] <- beta0[spe.tag] + beta1[spe.tag]*ecological_cov[site.tag]+eta.lam[site.tag,spe.tag]
#log(lambda[site.tag, spe.tag]) <-  mu[site.tag,spe.tag]
cloglog(psi[site.tag, spe.tag]) <-mu[site.tag,spe.tag]
psi1[site.tag, spe.tag] <- psi[site.tag, spe.tag]-0.000001
#log(lambda[site.tag, spe.tag]) <-  cloglog(psi[site.tag, spe.tag])
lambda[site.tag, spe.tag] <- -log( 1-psi1[site.tag, spe.tag])
#cloglog(psi[site.tag, spe.tag]) <- log(lambda[site.tag, spe.tag])
#psi[site.tag, spe.tag] <- 1-exp(- lambda[site.tag, spe.tag])
}
}
#Detection probability
for(site.tag in 1:n.sites){
for(spe.tag in 1:n.species){
logit(p.tag[site.tag, spe.tag]) <- alpha0[spe.tag] + alpha1[spe.tag]*detection_cov[site.tag]
}
}
#p.tag ~ dunif(0.001,1)
# Likelihood: key definitions in the likelihood
#############################################################
#                 Abundance Model                           #
#############################################################
for(site.tag in 1:n.sites){
lambda.g[site.tag] <- sum(lambda[site.tag,1:n.species])
for(k in 1:n.visit){
Y[site.tag,k] ~ dpois(lambda.g[site.tag])
}
}
#############################################################
#                 Occurence Model                           #
#############################################################
for(site.tag in 1:n.sites){
for(spe.tag in 1:n.species){
z[site.tag,spe.tag] ~ dbern(psi[site.tag, spe.tag])
for(k in 1:n.visit){
X[site.tag,spe.tag,k] ~ dbin(z[site.tag,spe.tag]*p.tag[site.tag, spe.tag], n.replicates)
}
}
}
#############################################################
#                pis                           #
#############################################################
for(site.tag in 1:n.sites){
for(spe.tag in 1:n.species){
pis[site.tag, spe.tag] <- (lambda[site.tag,spe.tag]/lambda.g[site.tag])
}
}
# sumLogProb ~ dnorm(0,1)
})
data <- simulations_all
#dimensions of the data
dim_data <- dim(data[[1]])
data_dim <- dim_data[2]
load("sim_interractions_na.RData")
source("fnx_for estimation.R")
require(coda)
require(nimble)
require(devtools)
require(mcmcplots)
require(MCMCglmm)
require(furrr)
require(purrr)
require(future.apply)
library(parallel)
library(foreach)
library(progressr)
library(pbapply)
library(ggmcmc)
simulations_all <- simulations_all_na[[1]]
handlers(global = TRUE)
op <- pboptions(type="timer")
#### Load required packages ####
require(coda)
require(nimble)
require(devtools)
require(mcmcplots)
require(MCMCglmm)
require(furrr)
require(ggmcmc)
require(purrr)
require(future.apply)
library(parallel)
library(foreach)
############################################
start_time <- Sys.time()
code <- nimbleCode({
#############################################################
#                 PRIOR DISTRIBUTIONS                       #
#############################################################
for(spe.tag in 1:n.species){
beta0[spe.tag]~ dnorm(0, sd=1)
#mean.lambda[spe.tag] <- exp(beta0[spe.tag])
#beta0[spe.tag] <- log(mean.lambda[spe.tag])
#mean.lambda[spe.tag] ~ dunif(0,50)
alpha0[spe.tag] ~  dnorm(0,sd=100)
#mean.p[spe.tag] ~ dunif(0,1)
beta1[spe.tag] ~ dnorm(0,sd=1)
alpha1[spe.tag] ~ dnorm(0,sd=100)
}
for(spe.tag in 1:n.species){
mu.eta[spe.tag] <- 0
}
for(site.tag in 1:n.sites){
eta.lam[site.tag, 1:n.species] ~ dmnorm(mean = mu.eta[1:n.species],prec= omega[1:n.species, 1:n.species])
}
#Vague prior for variance covariance matrix
omega[1:n.species,1:n.species] ~ dwish(R[1:n.species,1:n.species], df)
Cov[1:n.species,1:n.species] <- inverse(omega[1:n.species,1:n.species])
for (spe.tag in 1:n.species) {
for (ss in 1:n.species) {
# Cov[spe.tag, ss] <- inprod(lamLatent[1:NLatent, spe.tag], lamLatent[1:NLatent, ss])+ Sigma[spe.tag,ss]
CorrIn[spe.tag, ss] <- Cov[spe.tag, ss]/sqrt(Cov[spe.tag, spe.tag] * Cov[ss, ss])
}
}
precmatrix[1:n.species, 1:n.species] <- inverse(Cov[1:n.species, 1:n.species])
#Link between the abundance and occupancy
for(site.tag in 1:n.sites){
for(spe.tag in 1:n.species){
mu[site.tag,spe.tag] <- beta0[spe.tag] + beta1[spe.tag]*ecological_cov[site.tag]+eta.lam[site.tag,spe.tag]
#log(lambda[site.tag, spe.tag]) <-  mu[site.tag,spe.tag]
cloglog(psi[site.tag, spe.tag]) <-mu[site.tag,spe.tag]
psi1[site.tag, spe.tag] <- psi[site.tag, spe.tag]-0.000001
#log(lambda[site.tag, spe.tag]) <-  cloglog(psi[site.tag, spe.tag])
lambda[site.tag, spe.tag] <- -log( 1-psi1[site.tag, spe.tag])
#cloglog(psi[site.tag, spe.tag]) <- log(lambda[site.tag, spe.tag])
#psi[site.tag, spe.tag] <- 1-exp(- lambda[site.tag, spe.tag])
}
}
#Detection probability
for(site.tag in 1:n.sites){
for(spe.tag in 1:n.species){
logit(p.tag[site.tag, spe.tag]) <- alpha0[spe.tag] + alpha1[spe.tag]*detection_cov[site.tag]
}
}
#p.tag ~ dunif(0.001,1)
# Likelihood: key definitions in the likelihood
#############################################################
#                 Abundance Model                           #
#############################################################
for(site.tag in 1:n.sites){
lambda.g[site.tag] <- sum(lambda[site.tag,1:n.species])
for(k in 1:n.visit){
Y[site.tag,k] ~ dpois(lambda.g[site.tag])
}
}
#############################################################
#                 Occurence Model                           #
#############################################################
for(site.tag in 1:n.sites){
for(spe.tag in 1:n.species){
z[site.tag,spe.tag] ~ dbern(psi[site.tag, spe.tag])
for(k in 1:n.visit){
X[site.tag,spe.tag,k] ~ dbin(z[site.tag,spe.tag]*p.tag[site.tag, spe.tag], n.replicates)
}
}
}
#############################################################
#                pis                           #
#############################################################
for(site.tag in 1:n.sites){
for(spe.tag in 1:n.species){
pis[site.tag, spe.tag] <- (lambda[site.tag,spe.tag]/lambda.g[site.tag])
}
}
# sumLogProb ~ dnorm(0,1)
})
data <- simulations_all
#dimensions of the data
dim_data <- dim(data[[1]])
load("/Volumes/kwakupa/idm_miss_na_50/estimate_species_na.RData")
species_est1 <- species_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_species_na.RData")
species_est1 <- species_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_species_na1.RData")
species_est2 <- species_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_species_na2.RData")
species_est3 <- species_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_species_na3.RData")
species_est4 <- species_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_species_na4.RData")
species_est5 <- species_estimates_na
species_estimates_na <- c(species_est1,
species_est2,
species_est3,
species_est4,
species_est5)
load("/Volumes/kwakupa/idm_miss_na_50/estimate_genus_na.RData")
genus_est1 <- genus_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_genus_na1.RData")
genus_est2 <- genus_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_genus_na2.RData")
genus_est3 <- genus_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_genus_na3.RData")
genus_est4 <- genus_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_genus_na4.RData")
genus_est5 <- genus_estimates_na
genus_estimates_na <- c(genus_est1,
genus_est2,
genus_est3,
genus_est4,
genus_est5)
inter_prop50 <- lapply(inter_estimates_na, function(x){
if(class(x)!= "try-error"){x[[1]]}
})
#Genus only approach
#pi's
genus_prop50 <- lapply(genus_estimates_na, function(x){
if(class(x)!= "try-error"){x[[1]]}
})
#########################
#       N.species = 50
################################
#Loading data for N.species =20
load("/Volumes/kwakupa/idm_miss_na_50/estimate_inter_na.RData")
inter_est1 <- inter_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_inter_na1.RData")
inter_est2 <- inter_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_inter_na2.RData")
inter_est3 <- inter_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_inter_na3.RData")
inter_est4 <- inter_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_inter_na4.RData")
inter_est5 <- inter_estimates_na
inter_estimates_na <- c(inter_est1,
inter_est2,
inter_est3,
inter_est4,
inter_est5)
load("/Volumes/kwakupa/idm_miss_na_50/estimate_species_na.RData")
species_est1 <- species_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_species_na1.RData")
species_est2 <- species_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_species_na2.RData")
species_est3 <- species_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_species_na3.RData")
species_est4 <- species_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_species_na4.RData")
species_est5 <- species_estimates_na
species_estimates_na <- c(species_est1,
species_est2,
species_est3,
species_est4,
species_est5)
load("/Volumes/kwakupa/idm_miss_na_50/estimate_genus_na.RData")
genus_est1 <- genus_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_genus_na1.RData")
genus_est2 <- genus_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_genus_na2.RData")
genus_est3 <- genus_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_genus_na3.RData")
genus_est4 <- genus_estimates_na
load("/Volumes/kwakupa/idm_miss_na_50/estimate_genus_na4.RData")
genus_est5 <- genus_estimates_na
genus_estimates_na <- c(genus_est1,
genus_est2,
genus_est3,
genus_est4,
genus_est5)
inter_prop50 <- lapply(inter_estimates_na, function(x){
if(class(x)!= "try-error"){x[[1]]}
})
#Genus only approach
#pi's
genus_prop50 <- lapply(genus_estimates_na, function(x){
if(class(x)!= "try-error"){x[[1]]}
})
#pi's
species_prop50 <- lapply(species_estimates_na, function(x){
if(class(x)!= "try-error"){x[[1]]}
})
##Estimates
inter_est50 <- lapply(inter_estimates_na, function(x){
if(class(x)!= "try-error"){x[[2]]}
})
#Genus only approach
genus_est50 <- lapply(genus_estimates_na, function(x){
if(class(x)!= "try-error"){x[[2]]}
})
species_est50 <- lapply(species_estimates_na, function(x){
if(class(x)!= "try-error"){x[[2]]}
})
hills_inter50<- pblapply(inter_prop50, function(x){
pblapply(q, function(z){
if(!is.null(x)){
data <- hill_index(z, x)
}
}, cl=1)
}, cl=1)
hills_inter50<- pblapply(inter_prop50, function(x){
pblapply(q, function(z){
if(!is.null(x)){
data <- hill_index(z, x)
}
}, cl=1)
}, cl=1)
source("/Volumes/kwakupa/idm_miss_na_10/fnx_for estimation.R")
hills_inter50<- pblapply(inter_prop50, function(x){
pblapply(q, function(z){
if(!is.null(x)){
data <- hill_index(z, x)
}
}, cl=1)
}, cl=1)
install.packages(c("furrr", "MCMCglmm", "mcmcplots"))
exit
q()
